/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PartnersImport } from './routes/partners'
import { Route as MagazinesImport } from './routes/magazines'
import { Route as EtsImport } from './routes/ets'
import { Route as DataCampImport } from './routes/data-camp'
import { Route as IndexImport } from './routes/index'
import { Route as MagazineIdImport } from './routes/magazine.$id'

// Create/Update Routes

const PartnersRoute = PartnersImport.update({
  path: '/partners',
  getParentRoute: () => rootRoute,
} as any)

const MagazinesRoute = MagazinesImport.update({
  path: '/magazines',
  getParentRoute: () => rootRoute,
} as any)

const EtsRoute = EtsImport.update({
  path: '/ets',
  getParentRoute: () => rootRoute,
} as any)

const DataCampRoute = DataCampImport.update({
  path: '/data-camp',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MagazineIdRoute = MagazineIdImport.update({
  path: '/magazine/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/data-camp': {
      id: '/data-camp'
      path: '/data-camp'
      fullPath: '/data-camp'
      preLoaderRoute: typeof DataCampImport
      parentRoute: typeof rootRoute
    }
    '/ets': {
      id: '/ets'
      path: '/ets'
      fullPath: '/ets'
      preLoaderRoute: typeof EtsImport
      parentRoute: typeof rootRoute
    }
    '/magazines': {
      id: '/magazines'
      path: '/magazines'
      fullPath: '/magazines'
      preLoaderRoute: typeof MagazinesImport
      parentRoute: typeof rootRoute
    }
    '/partners': {
      id: '/partners'
      path: '/partners'
      fullPath: '/partners'
      preLoaderRoute: typeof PartnersImport
      parentRoute: typeof rootRoute
    }
    '/magazine/$id': {
      id: '/magazine/$id'
      path: '/magazine/$id'
      fullPath: '/magazine/$id'
      preLoaderRoute: typeof MagazineIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/data-camp': typeof DataCampRoute
  '/ets': typeof EtsRoute
  '/magazines': typeof MagazinesRoute
  '/partners': typeof PartnersRoute
  '/magazine/$id': typeof MagazineIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/data-camp': typeof DataCampRoute
  '/ets': typeof EtsRoute
  '/magazines': typeof MagazinesRoute
  '/partners': typeof PartnersRoute
  '/magazine/$id': typeof MagazineIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/data-camp': typeof DataCampRoute
  '/ets': typeof EtsRoute
  '/magazines': typeof MagazinesRoute
  '/partners': typeof PartnersRoute
  '/magazine/$id': typeof MagazineIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/data-camp'
    | '/ets'
    | '/magazines'
    | '/partners'
    | '/magazine/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/data-camp' | '/ets' | '/magazines' | '/partners' | '/magazine/$id'
  id:
    | '__root__'
    | '/'
    | '/data-camp'
    | '/ets'
    | '/magazines'
    | '/partners'
    | '/magazine/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DataCampRoute: typeof DataCampRoute
  EtsRoute: typeof EtsRoute
  MagazinesRoute: typeof MagazinesRoute
  PartnersRoute: typeof PartnersRoute
  MagazineIdRoute: typeof MagazineIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DataCampRoute: DataCampRoute,
  EtsRoute: EtsRoute,
  MagazinesRoute: MagazinesRoute,
  PartnersRoute: PartnersRoute,
  MagazineIdRoute: MagazineIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/data-camp",
        "/ets",
        "/magazines",
        "/partners",
        "/magazine/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/data-camp": {
      "filePath": "data-camp.tsx"
    },
    "/ets": {
      "filePath": "ets.tsx"
    },
    "/magazines": {
      "filePath": "magazines.tsx"
    },
    "/partners": {
      "filePath": "partners.tsx"
    },
    "/magazine/$id": {
      "filePath": "magazine.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
